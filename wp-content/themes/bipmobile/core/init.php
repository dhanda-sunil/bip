<?php
/**
 * This file contains code for activation frontend and core wordpress features
 *
 * Domain name for translation strings
 */
// frontend class name
$bip_core_class = 'BipCore';
if (!class_exists($bip_core_class)) {
    class BipCore{
        const IMAGE_SIZE_PORTFOLIO_ITEM = 'portfolio-item';
        const IMAGE_SIZE_SHOP_ITEM = 'shop-item';
        const TOP_MENU_LOCATION = 'bip_top_menu';
        public static function getMenuWalker(){
            if (!class_exists('Bip_Walker_Nav_Menu')) {
                $template_directory = get_template_directory();
                require_once $template_directory . '/core/helpers/class-bip-walker-nav-menu.php';
            }
            return new Bip_Walker_Nav_Menu();
        }
        /**
         * Makes some changes to the <title> tag, by filtering the output of wp_title().
         *
         * If we have a site description and we're viewing the home page or a blog posts
         * page (when using a static front page), then we will add the site description.
         *
         * If we're viewing a search result, then we're going to recreate the title entirely.
         * We're going to add page numbers to all titles as well, to the middle of a search
         * result title and the end of all other titles.
         *
         * The site title also gets added to all titles.
         *
         * @param string $title Title generated by wp_title()
         * @param string $separator The separator passed to wp_title().
         * @param string $seplocation Separator location passed to wp_title().
         * @return string The new title, ready for the <title> tag.
         */
        public static function filterWpTitle($title, $separator, $seplocation){
            // Don't affect wp_title() calls in feeds.
            if ( is_feed() )
                    return $title;
            // The $paged global variable contains the page number of a listing of posts.
            // The $page global variable contains the page number of a single post that is paged.
            // We'll display whichever one applies, if we're not looking at the first page.
            global $paged, $page;
            if ( is_search() ) {
                    // If we're a search, let's start over:
                    $title = sprintf( __( 'Search results for %s', BIP_DOMAIN ), '"' . get_search_query() . '"' );
                    // Add a page number if we're on page 2 or more:
                    if ( $paged >= 2 )
                            $title .= " $separator " . sprintf( __( 'Page %s', BIP_DOMAIN ), $paged );
                    // Add the site name to the end:
                    $title .= " $separator " . get_bloginfo( 'name', 'display' );
                    // We're done. Let's send the new title back to wp_title():
                    return $title;
            }
            // Otherwise, let's start by adding the site name to the end:
            $title .= get_bloginfo( 'name', 'display' );
            // If we have a site description and we're on the home/front page, add the description:
            $site_description = get_bloginfo( 'description', 'display' );
            if ( $site_description && ( is_home() || is_front_page() ) )
                    $title .= " $separator " . $site_description;
            // Add a page number if necessary:
            if ( $paged >= 2 || $page >= 2 )
                    $title .= " $separator " . sprintf( __( 'Page %s', BIP_DOMAIN ), max( $paged, $page ) );
            // Return the new title to wp_title():
            return $title;
        }
        /**
         * Add Support for locale changing on the fly. Must be called before load_theme_textdomain()
         */
        public static function filterLocale($locale){
            return isset($_GET["l"]) ? $_GET["l"] : $locale;
        }
        public static function filterImageSizeNamesChoose($size_names){
            $size_names[self::IMAGE_SIZE_PORTFOLIO_ITEM] = __('Portfolio image', BIP_DOMAIN);
            $size_names[self::IMAGE_SIZE_SHOP_ITEM] = __('Shop image', BIP_DOMAIN);
            return $size_names;
        }
        /**
         * Sets up theme defaults and registers support for various WordPress features.
         *
         * Note that this function is hooked into the after_setup_theme hook, which runs
         * before the init hook. The init hook is too late for some features, such as indicating
         * support post thumbnails.
         *
         * @uses add_theme_support() To add support for post thumbnails and automatic feed links.
         * @uses register_nav_menus() To add support for navigation menus.
         * @uses add_custom_background() To add support for a custom background.
         * @uses add_editor_style() To style the visual editor.
         * @uses load_theme_textdomain() For translation/localization support.
         * @uses add_custom_image_header() To add support for a custom header.
         * @uses register_default_headers() To register the default custom header images provided with the theme.
         * @uses set_post_thumbnail_size() To set a custom post thumbnail size.
         *
         */
        public static function setup(){
            /* Make theme available for translation.
             * Translations can be added to the /languages/ directory.
             */
            load_theme_textdomain(BIP_DOMAIN, get_template_directory() . "/languages");
            $locale 		= get_locale();
            $locale_file 	= get_template_directory() . "/languages/$locale.php";
            if ( is_readable( $locale_file ) )
                    require_once( $locale_file );
            // This theme styles the visual editor with editor-style.css to match the theme style.
            //add_editor_style(); TODO Add editors style
            // Uncomment if you choose to use post thumbnails; add the_post_thumbnail() wherever thumbnail should appear
            add_theme_support( 'post-thumbnails' );
            add_image_size( self::IMAGE_SIZE_PORTFOLIO_ITEM, '300', '240', true );
            add_image_size( self::IMAGE_SIZE_PORTFOLIO_ITEM, '300', '282', true );
            // This theme uses wp_nav_menu() in one location.
            register_nav_menus( array(
                    self::TOP_MENU_LOCATION => __( 'Top Navigation', BIP_DOMAIN ),
            ) );
            $defaults = array(
                    'default-image'          => get_template_directory_uri() . '/assets/img/logo.png',
                    'random-default'         => false,
                    'width'                  => 250,
                    'height'                 => 150,
                    'flex-height'            => false,
                    'flex-width'             => false,
                    'default-text-color'     => '',
                    'header-text'            => false,
                    'uploads'                => true,
            );
            // Logo support
            add_theme_support( 'custom-header', $defaults );
            // Add default posts and comments RSS feed links to head
            add_theme_support( 'automatic-feed-links' );
        }
        public static function printScripts(){
				wp_enqueue_script( 'bip_ajax_handle' );
			
			$translation_array 	= array( 'url' =>wp_nonce_url( admin_url('admin-ajax.php'), 'bip_ajax_render_video' ), 'a_value' => '10' );
			wp_localize_script( 'bip_ajax_handle', 'bip_ajax', $translation_array );
        }
        public static function printStyles(){
        }
        public static function printFooterScripts(){?>
			<script>
			/* ----- Video Modal ----- */
			function showVideo(e, vid, ajax_url){
				var screenH 	= jQuery(window).height(),
					screenW		= jQuery(window).width(),
					wpadminbarH	= 0,
					scrollH		= jQuery(window).scrollTop();
				if(jQuery('#wpadminbar').length>0){
					var wpadminbarH = jQuery('#wpadminbar').height();
					screenH			= screenH-70-wpadminbarH;
				}
				var data = {
					action: 'render_video',
					mediaid: vid
				};
				var ajax_url = '<?php echo wp_nonce_url(admin_url('admin-ajax.php'), 'bip_ajax_render_video' );?>';
				
				jQuery.post(ajax_url, data, function(response) {
					jQuery('#productVideo .modal-body').html(response);
				});
				if(jQuery('#productVideo.modal').length>0){
					var modal		= jQuery('#productVideo.modal'),
						modalH		= (screenH*90)/100,
						marginLeft	= modal.outerWidth()/2,
						marginTop	= ((screenH*5)/100) + scrollH;
					console.dir(jQuery('#jwplayer-0_wrapper object'));
					modal.css('margin-top', marginTop).css('margin-left', -marginLeft).css('display','block');
					jQuery('#productVideo .modal-body').css('height', modalH);
					jQuery('#jwplayer-0_wrapper').css('height', '100%');
					jQuery('#jwplayer-0_wrapper').trigger('click');;
				}
			}
			jQuery(document).ready(function($) {
				$('.modal .close').click(function(){
					jQuery('#productVideo .modal-body').html('');
					/*$('.vjs-play-control.vjs-playing')[0]);
					if($('.vjs-play-control.vjs-playing')[0]){
						$('.vjs-play-control').trigger('click');
					}*/
					$('#productVideo.modal').css('display','none');
				});
			});
            </script>
            <?php
        }
        public static function loadScripts(){
            if ( is_singular() ) wp_enqueue_script( "comment-reply" );
             
            $template_directory_uri = get_template_directory_uri();
            wp_register_script( self::prefix('modernizr.custom'), $template_directory_uri . '/assets/js/modernizr.custom.js');
            wp_register_script( self::prefix('mobilemenu'), $template_directory_uri . '/assets/js/jquery.mobilemenu.js', array('jquery'), '', true);
            wp_register_script( self::prefix('flexslider'), $template_directory_uri . '/assets/js/jquery.flexslider-min.js', array('jquery'), '', true);
            wp_register_script( self::prefix('main'), $template_directory_uri . '/assets/js/main.js', array('jquery'), '', true);
            wp_register_script( self::prefix('bootstrap-modal'), $template_directory_uri . '/assets/js/bootstrap-modal.js', array('jquery'), '', true);
			wp_register_script( self::prefix('bootstrap-js'), $template_directory_uri . '/assets/bootstrap/js/bootstrap.min.js');
			wp_register_script( self::prefix('bootstrap-carousel'), $template_directory_uri . '/assets/bootstrap/js/bootstrap-carousel.js');
			wp_register_script( self::prefix('jCarousel-js'), $template_directory_uri . '/assets/js/jCarousel.js');
			
            wp_enqueue_script('jquery');
			wp_enqueue_script(self::prefix('bootstrap-js'));
			wp_enqueue_script(self::prefix('bootstrap-carousel'));
			wp_enqueue_script(self::prefix('jCarousel-js'));
			if(is_home() || is_front_page()){}
            wp_enqueue_script(self::prefix('modernizr.custom'));
            wp_enqueue_script(self::prefix('mobilemenu'));
            wp_enqueue_script(self::prefix('flexslider'));
            wp_enqueue_script(self::prefix('main'));
            wp_enqueue_script(self::prefix('bootstrap-modal'));
			
        }
        public static function loadStyles(){
            $template_directory_uri = get_template_directory_uri();
            wp_register_style( self::prefix('style'), $template_directory_uri . '/style.css', array(), '20121203');
            wp_register_style( self::prefix('bootstrap.min'), $template_directory_uri . '/assets/css/bootstrap.css');
			/*wp_register_style( self::prefix('bootstrap-res.min'), $template_directory_uri . '/assets/css/bootstrap-responsive.min.css');*/
            wp_register_style( self::prefix('flexslider'), $template_directory_uri . '/assets/css/flexslider.css');
			wp_register_style( self::prefix('jCarousel-css'), $template_directory_uri . '/assets/css/jCarousel.css');
			wp_register_style( self::prefix('video-css'), $template_directory_uri . '/assets/video-js/video-js.css');
			
			wp_enqueue_style(self::prefix('bootstrap.min'));
			/*wp_enqueue_style(self::prefix('bootstrap-res.min'));*/
            wp_enqueue_style(self::prefix('style'));
            wp_enqueue_style(self::prefix('flexslider'));
			wp_enqueue_style(self::prefix('jCarousel-css'));
			if(is_home() || is_front_page()){
				wp_enqueue_style(self::prefix('video-css'));
			}
        }
        /**
         * Adds two classes to the array of body classes.
         * The first is if the site has only had one author with published posts.
         * The second is if a singular post being displayed
         */
        public static function filterBodyClasses( $classes ){
            if ( function_exists( 'is_multi_author' ) && ! is_multi_author() )
                    $classes[] = 'single-author';
            if ( is_singular() && ! is_home())
                    $classes[] = 'singular';
            return $classes;
        }
        public static function prefix($str){
            return get_class() . '_' . $str;
        }
        public static function widgetsInit(){
            register_sidebar( array(
                    'name' 			=> __( 'Footer Sidebar', BIP_DOMAIN ),
                    'id' 			=> 'footer-sidebar',
                    'before_widget' => '<div id="%1$s" class="span4 widget %2$s">',
                    'after_widget' 	=> "</div></div>",
                    'before_title' 	=> '<div class="widget-title"><h3>',
                    'after_title' 	=> '</h3></div><div class="widget-content">',
            ) );
            register_sidebar( array(
                    'name' 			=> __( 'Footer Copyright', BIP_DOMAIN ),
                    'id' 			=> 'footer-copyright',
                    'before_widget' => '<div id="%1$s" class="%2$s">',
                    'after_widget' 	=> "</div></div>",
                    'before_title' 	=> '<div class="widget-title"><h3>',
                    'after_title' 	=> '</h3></div><div class="widget-content">',
            ) );
        }
        public static function loadWidgets(){
            $template_directory = get_template_directory();
            require_once $template_directory . '/core/widgets/tweets/tweets.php';
            require_once $template_directory . '/core/widgets/flickr/photostream.php';
        }
        public static function filterPreGetPosts(WP_Query $query){
            if ( $query->is_main_query()) {
                if (is_admin()) {
                    $query->set('order', 'ASC');
                    $query->set('orderby', 'menu_order');
                } else {
                //} elseif (is_home()) {
                    $menu_name = self::TOP_MENU_LOCATION;
                    $locations = get_nav_menu_locations();
                    $query->set('post_type', 'page');
                    $query->set('posts_per_page', -1);
                    $query->set('nopaging', true);
                    if ($locations && (isset($locations[$menu_name])) ) {
                        $menu_items = wp_get_nav_menu_items($locations[$menu_name]);
                        if (!empty($menu_items)) {
                            global $primary_menu_pages, $wp_version;
                            $primary_menu_pages = array();
                            foreach ($menu_items as $item) {
                                $primary_menu_pages[] = $item->object_id;
                            }
                            $query->set('post__in', $primary_menu_pages);
                            if (version_compare($wp_version, '3.5', "<")) {
                                $primary_menu_pages = implode(',', $primary_menu_pages);
                                $query->set('orderby', 'none');
                                add_filter('posts_orderby', create_function('$orderby', 'global $wpdb, $primary_menu_pages; return "FIELD( {$wpdb->posts}.ID, $primary_menu_pages )";'));
                            } else {
                                $query->set('orderby', 'post__in');
                            }
                        }
                    }
                }
            }
        }
        public static function createPostTypes(){
            /*-----------------------------------------------------------------------------------*/
            /*	Register slider post type
            /*-----------------------------------------------------------------------------------*/
            $slider_args = array(
                    'labels' => array(
                        'name' => __( 'Slider', BIP_DOMAIN),
                        'singular_name' => __( 'Slides', BIP_DOMAIN),
                        'add_new' => _x( 'Add New', 'slides', BIP_DOMAIN),
                        'add_new_item' => __( 'Add New Slide', BIP_DOMAIN),
                        'edit_item' => __( 'Edit Slide', BIP_DOMAIN),
                        'new_item' => __( 'New Slide', BIP_DOMAIN),
                        'view_item' => __( 'View Slide', BIP_DOMAIN),
                        'search_items' => __( 'Search Slides', BIP_DOMAIN),
                        'not_found' =>  __( 'No slides found', BIP_DOMAIN),
                        'not_found_in_trash' => __( 'No slides found in Trash', BIP_DOMAIN),
                        'parent_item_colon' => ''
                    ),
                    'public' => true,
                    'exclude_from_search' => true,
                    'publicly_queryable' => true,
                    'show_ui' => true,
                    'query_var' => true,
                    'capability_type' => 'post',
                    'hierarchical' => false,
                    'menu_position' => null,
                    'has_archive' => true,
                    'supports' => array('title', 'thumbnail', 'page-attributes'),
                    'show_in_nav_menus' => false,
                    'rewrite' => array(
                        'with_front' => false,
                    )
            );
            register_post_type('slides', $slider_args);
			
            /*-----------------------------------------------------------------------------------*/
            /*	Register products post type
            /*-----------------------------------------------------------------------------------*/
            $products_args = array(
                    'labels' => array(
                        'name' => __( 'Products', BIP_DOMAIN),
                        'singular_name' => __( 'Product', BIP_DOMAIN),
                        'add_new' => _x( 'Add New', 'product', BIP_DOMAIN),
                        'add_new_item' => __( 'Add New Product', BIP_DOMAIN),
                        'edit_item' => __( 'Edit Product', BIP_DOMAIN),
                        'new_item' => __( 'New Product', BIP_DOMAIN),
                        'view_item' => __( 'View Product', BIP_DOMAIN),
                        'search_items' => __( 'Search Products', BIP_DOMAIN),
                        'not_found' =>  __( 'No product found', BIP_DOMAIN),
                        'not_found_in_trash' => __( 'No product found in Trash', BIP_DOMAIN),
                        'parent_item_colon' => ''
                    ),
                    'public' => true,
                    'exclude_from_search' => true,
                    'publicly_queryable' => true,
                    'show_ui' => true,
                    'query_var' => true,
                    'capability_type' => 'post',
                    'hierarchical' => false,
                    'menu_position' => null,
                    'has_archive' => true,
                    'show_in_nav_menus' => false,
                    'supports' => array('title', 'thumbnail', 'page-attributes'),
                    'rewrite' => array(
                        'with_front' => false,
                    ),
					'taxonomies' => array('category')
            );
            register_post_type('product', $products_args);
			
			/*-----------------------------------------------------------------------------------*/
            /*	Register tariffs post type
            /*-----------------------------------------------------------------------------------*/
            $tariff_args = array(
                    'labels' => array(
                        'name' => __( 'Tariffs', BIP_DOMAIN),
                        'singular_name' => __( 'Tariff', BIP_DOMAIN),
                        'add_new' => _x( 'Add New', 'tariff', BIP_DOMAIN),
                        'add_new_item' => __( 'Add New Tariff Item', BIP_DOMAIN),
                        'edit_item' => __( 'Edit Tariff Item', BIP_DOMAIN),
                        'new_item' => __( 'New Tariff Item', BIP_DOMAIN),
                        'view_item' => __( 'View Tariff Item', BIP_DOMAIN),
                        'search_items' => __( 'Search Tariff', BIP_DOMAIN),
                        'not_found' =>  __( 'No tariff found', BIP_DOMAIN),
                        'not_found_in_trash' => __( 'No tariff found in Trash', BIP_DOMAIN),
                        'parent_item_colon' => ''
                    ),
                    'public' => true,
                    'exclude_from_search' => true,
                    'publicly_queryable' => true,
                    'show_ui' => true,
                    'query_var' => true,
                    'capability_type' => 'post',
                    'hierarchical' => false,
                    'menu_position' => null,
                    'show_in_nav_menus' => false,
                    'has_archive' => true,
                    'supports' => array('title','thumbnail', 'page-attributes'),
                    'rewrite' => array(
                        'with_front' => false,
                    ),
					'taxonomies' => array('category')
            );
            register_post_type('tariff', $tariff_args);
			
			/*-----------------------------------------------------------------------------------*/
			/*	Register Tariff Table post type
			/*-----------------------------------------------------------------------------------*/
            $tariff_table_args = array(
                    'labels' => array(
                        'name' => __( 'Tariff Tables', BIP_DOMAIN),
                        'singular_name' => __( 'Tariff Table', BIP_DOMAIN),
                        'add_new' => _x( 'Add New', 'tariff_table', BIP_DOMAIN),
                        'add_new_item' => __( 'Add New Tariff Table Item', BIP_DOMAIN),
                        'edit_item' => __( 'Edit Tariff Table Item', BIP_DOMAIN),
                        'new_item' => __( 'New Tariff Table Item', BIP_DOMAIN),
                        'view_item' => __( 'View Tariff Table Item', BIP_DOMAIN),
                        'search_items' => __( 'Search Tariff Table Item', BIP_DOMAIN),
                        'not_found' =>  __( 'No tariff table item found', BIP_DOMAIN),
                        'not_found_in_trash' => __( 'No tariff table item found in Trash', BIP_DOMAIN),
                        'parent_item_colon' => ''
                    ),
                    'public' => true,
                    'exclude_from_search' => true,
                    'publicly_queryable' => true,
                    'show_ui' => true,
                    'query_var' => true,
                    'capability_type' => 'post',
                    'hierarchical' => false,
                    'menu_position' => null,
					'menu_icon'	=> null,
                    'show_in_nav_menus' => false,
                    'has_archive' => true,
                    'supports' => array('title','thumbnail', 'page-attributes'),
                    'rewrite' => array(
                        'with_front' => false,
                    ),
					'taxonomies' => array('category')
            );
            register_post_type('tariff_table', $tariff_table_args);
			
			/*-----------------------------------------------------------------------------------*/
			/*	Register Faq Table post type
			/*-----------------------------------------------------------------------------------*/
            $faq_table_args = array(
                    'labels' => array(
                        'name' => __( 'Faq Tables', BIP_DOMAIN),
                        'singular_name' => __( 'Faq Table', BIP_DOMAIN),
                        'add_new' => _x( 'Add New', 'faq_table', BIP_DOMAIN),
                        'add_new_item' => __( 'Add New Faq Table Item', BIP_DOMAIN),
                        'edit_item' => __( 'Edit Faq Table Item', BIP_DOMAIN),
                        'new_item' => __( 'New Faq Table Item', BIP_DOMAIN),
                        'view_item' => __( 'View Faq Table Item', BIP_DOMAIN),
                        'search_items' => __( 'Search Faq Table Item', BIP_DOMAIN),
                        'not_found' =>  __( 'No faq table item found', BIP_DOMAIN),
                        'not_found_in_trash' => __( 'No faq table item found in Trash', BIP_DOMAIN),
                        'parent_item_colon' => ''
                    ),
                    'public' => true,
                    'exclude_from_search' => true,
                    'publicly_queryable' => true,
                    'show_ui' => true,
                    'query_var' => true,
                    'capability_type' => 'post',
                    'hierarchical' => false,
                    'menu_position' => null,
					'menu_icon'	=> null,
                    'show_in_nav_menus' => false,
                    'has_archive' => true,
                    'supports' => array('title','thumbnail', 'page-attributes'),
                    'rewrite' => array(
                        'with_front' => false,
                    ),
					'taxonomies' => array('category')
            );
            register_post_type('faq_table', $faq_table_args);
			
			/*-----------------------------------------------------------------------------------*/
            /*	Register options post type
            /*-----------------------------------------------------------------------------------*/
            $options_args = array(
                    'labels' => array(
                        'name' => __( 'Options', BIP_DOMAIN),
                        'singular_name' => __( 'Option', BIP_DOMAIN),
                        'add_new' => _x( 'Add New', 'option', BIP_DOMAIN),
                        'add_new_item' => __( 'Add New Option', BIP_DOMAIN),
                        'edit_item' => __( 'Edit Option', BIP_DOMAIN),
                        'new_item' => __( 'New Option', BIP_DOMAIN),
                        'view_item' => __( 'View Option', BIP_DOMAIN),
                        'search_items' => __( 'Search Options', BIP_DOMAIN),
                        'not_found' =>  __( 'No option found', BIP_DOMAIN),
                        'not_found_in_trash' => __( 'No option found in Trash', BIP_DOMAIN),
                        'parent_item_colon' => ''
                    ),
                    'public' => true,
                    'exclude_from_search' => true,
                    'publicly_queryable' => true,
                    'show_ui' => true,
                    'query_var' => true,
                    'capability_type' => 'post',
                    'hierarchical' => false,
                    'menu_position' => null,
                    'has_archive' => true,
                    'show_in_nav_menus' => false,
                    'supports' => array('title', 'thumbnail', 'page-attributes'),
                    'rewrite' => array(
                        'with_front' => false,
                    ),
					'taxonomies' => array('category')
            );
            register_post_type('option', $options_args);
			/*-----------------------------------------------------------------------------------*/
            /*	Register Ricariche post type
            /*-----------------------------------------------------------------------------------*/
            $options_args = array(
                    'labels' => array(
                        'name' => __( 'Ricariche', BIP_DOMAIN),
                        'singular_name' => __( 'Ricariche', BIP_DOMAIN),
                        'add_new' => _x( 'Add New', 'ricariche', BIP_DOMAIN),
                        'add_new_item' => __( 'Add New Ricariche', BIP_DOMAIN),
                        'edit_item' => __( 'Edit Ricariche', BIP_DOMAIN),
                        'new_item' => __( 'New Ricariche', BIP_DOMAIN),
                        'view_item' => __( 'View Ricariche', BIP_DOMAIN),
                        'search_items' => __( 'Search Ricariche', BIP_DOMAIN),
                        'not_found' =>  __( 'No Ricariche found', BIP_DOMAIN),
                        'not_found_in_trash' => __( 'No Ricariche found in Trash', BIP_DOMAIN),
                        'parent_item_colon' => ''
                    ),
                    'public' => true,
                    'exclude_from_search' => true,
                    'publicly_queryable' => true,
                    'show_ui' => true,
                    'query_var' => true,
                    'capability_type' => 'post',
                    'hierarchical' => false,
                    'menu_position' => null,
                    'has_archive' => true,
                    'show_in_nav_menus' => false,
                    'supports' => array('title', 'thumbnail', 'page-attributes'),
                    'rewrite' => array(
                        'with_front' => false,
                    ),
					'taxonomies' => array('category')
            );
            register_post_type('Ricariche', $options_args);
            /*-----------------------------------------------------------------------------------*/
            /*	Register portfolio post type
            /*-----------------------------------------------------------------------------------*/
            $portfolio_args = array(
                    'labels' => array(
                        'name' => __( 'Portfolio', BIP_DOMAIN),
                        'singular_name' => __( 'Portfolio', BIP_DOMAIN),
                        'add_new' => _x( 'Add New', 'portfolio', BIP_DOMAIN),
                        'add_new_item' => __( 'Add New Portfolio Item', BIP_DOMAIN),
                        'edit_item' => __( 'Edit Portfolio Item', BIP_DOMAIN),
                        'new_item' => __( 'New Portfolio Item', BIP_DOMAIN),
                        'view_item' => __( 'View Portfolio Item', BIP_DOMAIN),
                        'search_items' => __( 'Search Portfolio', BIP_DOMAIN),
                        'not_found' =>  __( 'No portfolio found', BIP_DOMAIN),
                        'not_found_in_trash' => __( 'No portfolio found in Trash', BIP_DOMAIN),
                        'parent_item_colon' => ''
                    ),
                    'public' => true,
                    'exclude_from_search' => true,
                    'publicly_queryable' => true,
                    'show_ui' => true,
                    'query_var' => true,
                    'capability_type' => 'post',
                    'hierarchical' => false,
                    'show_in_nav_menus' => false,
                    'menu_position' => null,
                    'has_archive' => true,
                    'supports' => array('title','editor','thumbnail', 'excerpt', 'page-attributes'),
                    'rewrite' => array(
                        'with_front' => false,
                    )
            );
            register_post_type('portfolio', $portfolio_args);
            
            /*-----------------------------------------------------------------------------------*/
            /*	Register shop post type
            /*-----------------------------------------------------------------------------------*/
            $shop_args = array(
                    'labels' => array(
                        'name' => __( 'Shop', BIP_DOMAIN),
                        'singular_name' => __( 'Shop', BIP_DOMAIN),
                        'add_new' => _x( 'Add New', 'shop', BIP_DOMAIN),
                        'add_new_item' => __( 'Add New Shop Item', BIP_DOMAIN),
                        'edit_item' => __( 'Edit Shop Item', BIP_DOMAIN),
                        'new_item' => __( 'New Shop Item', BIP_DOMAIN),
                        'view_item' => __( 'View Shop Item', BIP_DOMAIN),
                        'search_items' => __( 'Search Shop', BIP_DOMAIN),
                        'not_found' =>  __( 'No shop found', BIP_DOMAIN),
                        'not_found_in_trash' => __( 'No shop found in Trash', BIP_DOMAIN),
                        'parent_item_colon' => ''
                    ),
                    'public' => true,
                    'exclude_from_search' => true,
                    'publicly_queryable' => true,
                    'show_ui' => true,
                    'query_var' => true,
                    'capability_type' => 'post',
                    'hierarchical' => false,
                    'menu_position' => null,
                    'show_in_nav_menus' => false,
                    'has_archive' => true,
                    'supports' => array('title','thumbnail', 'page-attributes'),
                    'rewrite' => array(
                        'with_front' => false,
                    )
            );
            register_post_type('shop', $shop_args);
			
			/*-----------------------------------------------------------------------------------*/
            /*	Register Footer Links post type
            /*-----------------------------------------------------------------------------------*/
            $shop_args = array(
                    'labels' => array(
                        'name' => __( 'Footer Links', BIP_DOMAIN),
                        'singular_name' => __( 'Footer Link', BIP_DOMAIN),
                        'add_new' => _x( 'Add New Footer Link', 'footer_link', BIP_DOMAIN),
                        'add_new_item' => __( 'Add New Footer Link', BIP_DOMAIN),
                        'edit_item' => __( 'Edit Footer Link', BIP_DOMAIN),
                        'new_item' => __( 'New Footer Link', BIP_DOMAIN),
                        'view_item' => __( 'View Footer Link', BIP_DOMAIN),
                        'search_items' => __( 'Search Footer Links', BIP_DOMAIN),
                        'not_found' =>  __( 'No Footer Link found', BIP_DOMAIN),
                        'not_found_in_trash' => __( 'No Footer Link found in Trash', BIP_DOMAIN),
                        'parent_item_colon' => ''
                    ),
                    'public' => true,
                    'exclude_from_search' => true,
                    'publicly_queryable' => true,
                    'show_ui' => true,
                    'query_var' => true,
                    'capability_type' => 'post',
                    'hierarchical' => false,
                    'menu_position' => null,
                    'show_in_nav_menus' => false,
                    'has_archive' => true,
                    'supports' => array('title','thumbnail'),
                    'rewrite' => array(
                        'with_front' => false,
                    )
            );
            register_post_type('footer_link', $shop_args);
        }
        public static function filterPostClass($classes){
            static $j = 0;
            $classes[] = (++$j % 2 == 0) ? 'even' : 'odd';
            return $classes;
        }
		public static function filterContent($content){
            $content = self::changeUrlDynamically($content);
            return $content;
        }
        public static function adminBarRender(){
            global $wp_admin_bar;
            $wp_admin_bar->remove_menu('comments');
            $wp_admin_bar->remove_menu('new-post');
            $wp_admin_bar->remove_menu('new-link');
            if (!is_admin()) {
                $header_node = $wp_admin_bar->get_node('header');
                $header_node->title = __('Site Logo', BIP_DOMAIN);
                $wp_admin_bar->remove_node('header');
                $wp_admin_bar->add_node((array) $header_node);
            }
        }
        public static function isAdministratorUserLoggedIn(){
            return is_user_logged_in() && current_user_can('administrator');
        }
        public static function runMenuFallbackIfNoItems($items, $args){
            if($args->theme_location == self::TOP_MENU_LOCATION && empty($items) && is_callable($args->fallback_cb)){
                call_user_func( $args->fallback_cb, (array) $args );
            }
            return $items;
        }
        public static function emptyMenuFallback($args){
            if (self::isAdministratorUserLoggedIn()) :
            ?>
            <div class="span6 pull-right">
                <p class="alert clearfix"><?php printf(__('This is menu location. You can manage the menu <a href="%s">here</a>.', BIP_DOMAIN), admin_url('nav-menus.php')); ?><br />
                    <em class="pull-right"><small>
                    <?php esc_html_e('This tip is visible only for site administrators.', BIP_DOMAIN); ?>
                    </small></em>
                </p>
            </div>
            <?php
            endif;
        }
		public static function changeUrlDynamically($content){
			$url	= 'http://test.www.bip.it';
			if(is_admin()){
				return $content;
			}
			/*preg_match_all( '|http:\/\/test\.www\.bip\.it|i', $content, $matches );
			var_dump($matches);
			if(isset($matches[0][0]) && !empty($matches[0][0])){*/
				$urlParts = explode('/', $url, 4);
				$http    = $urlParts[0];
				if(isset($urlParts[3])){
					$home   = '/'.$urlParts[3];
				}else{
					$home	= '';
				}
				$newUrl		= $http.'//'.$_SERVER['HTTP_HOST'];
				$content	= str_replace($url, $newUrl, $content);
			/*}*/
			
			return $content;
		}
		public static function shopSearch(){
			$shop 	= isset($_GET['shop'])?$_GET['shop']:'';
			return $shop;
		}
    }
}
/*-----------------------------------------------------------------------------------*/
/*	Theme Setup
/*-----------------------------------------------------------------------------------*/
add_action( 'after_setup_theme', array($bip_core_class, 'setup') );
/*-----------------------------------------------------------------------------------*/
/*	Misc
/*-----------------------------------------------------------------------------------*/
add_filter('locale', array($bip_core_class, 'filterLocale')); // add support for changing locale on the fly by passing locale in GET parameter @example http://site.com?l=en_US
add_filter('body_class', array($bip_core_class, 'filterBodyClasses')); // add extra body classes
add_filter('the_content', array($bip_core_class, 'filterContent')); // chage the url dynamically
add_action('widgets_init', array($bip_core_class, 'widgetsInit')); // add widget areas
BipCore::loadWidgets(); // load widget classes
//add_filter('widget_text', 'do_shortcode'); // Use shortcodes in text widgets.
add_filter( 'wp_title', array($bip_core_class, 'filterWpTitle'), 10, 3 );
add_action( 'init', array($bip_core_class, 'createPostTypes'));
add_filter ( 'post_class' , array($bip_core_class, 'filterPostClass'));
// Removes from admin bar
add_action( 'wp_before_admin_bar_render', array($bip_core_class, 'adminBarRender'));
// Run menu fallback_cb if no items to display
add_filter('wp_nav_menu_objects', array($bip_core_class, 'runMenuFallbackIfNoItems'), 10, 2);
/*-----------------------------------------------------------------------------------*/
/*	Alter Main Query
/*-----------------------------------------------------------------------------------*/
//add_action('pre_get_posts', array($bip_core_class, 'filterPreGetPosts'));
/*-----------------------------------------------------------------------------------*/
/*	Images
/*-----------------------------------------------------------------------------------*/
add_filter('image_size_names_choose', array($bip_core_class, 'filterImageSizeNamesChoose')); // show added by add_image_size() function sizes in media library
/*-----------------------------------------------------------------------------------*/
/*	Scripts And Styles
/*-----------------------------------------------------------------------------------*/
// load external styles and scripts
add_action('wp_enqueue_scripts', array($bip_core_class, 'loadScripts'));
add_action('wp_enqueue_scripts', array($bip_core_class, 'loadStyles'));
// print inline css and javascript
add_action('wp_print_scripts', array($bip_core_class, 'printScripts'));
add_action('wp_print_styles', array($bip_core_class, 'printStyles'));

add_action('admin_menu', array('BipMobileThemeOptions', 'adminMenu'));

// print footer scripts
add_action('wp_print_footer_scripts', array($bip_core_class,'printFooterScripts'));
/*-----------------------------------------------------------------------------------*/
/*	Content Width
/*-----------------------------------------------------------------------------------*/
/**
 * Set the content width based on the theme's design and stylesheet.
 *
 * Used to set the width of images and content. Should be equal to the width the theme
 * is designed for, generally via the style.css stylesheet.
 */
if ( !isset($content_width) ) $content_width = 980;
